<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Document</title>
   <script>
      const ROOM_ID = "<%= roomId %>"
   </script>
   <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">
   <!-- <script defer src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script> -->
   <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
   <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
   <script src="/socket.io/socket.io.js" ></script>
   <!-- <link rel="stylesheet" href="style.css"> -->
   <style>
      .main {
    height: 100vh;
    display: flex;
}

.main__left {
    flex: 0.8;
    display: flex;
    flex-direction: column;
}

.main__right {
    flex: 0.2
}

.main__videos {
    flex-grow: 1;
    background-color: black;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 40px;
}

.main__controls {
    background-color: #1C1E20;
}

.main__right {
    background-color: #242324;
    border-left: 1px solid #3D3D42;
}

.main__controls {
    color: #D2D2D2;
    display: flex;
    justify-content: space-between;
    padding: 5px;
}

.main__controls__block {
    display: flex;
}

.main__controls__button {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 8px 10px;
    min-width: 80px;
    cursor: pointer;
}

.main__controls__button:hover {
    background-color: #343434;
    border-radius: 5px;
}

.main__controls__button i {
    font-size: 24px;
}

.main__right {
    display: flex;
    flex-direction: column;
}

.main__header {
    padding-top: 5px;
    color: #F5F5F5;
    text-align: center;
}

.main__chat_window {
    flex-grow: 1;
    overflow-y: auto;
}

.messages{
    color: white;
    list-style: none;
}

.main__message_container {
    padding: 22px 12px;
    display: flex;
}

.main__message_container input {
    flex-grow: 1;
    background-color: transparent;
    border: none;
    color: #F5F5F5;
}

.leave_meeting {
    color: #EB534B;
}

.unmute, .stop {
    color: #CC3B33;
}

   </style>
   <script src="https://kit.fontawesome.com/c939d0e917.js"></script>
   <!-- <script src="script.js" defer></script> -->
   <style>
      #video-grid{
         display: flex;
         justify-content: center;
         flex-wrap: wrap;
      }
      video{
         height: 300px;
         width: 400px;
         object-fit: cover;
         padding: 8px;
      }
   </style>
</head>
<body>
   <div class="main">
      <div class="main__left">
         <div class="main__videos">
            <div id="video-grid">

            </div>
         </div>
         <div class="main__controls">
            <div class="main__controls__block">
               <div onclick="muteUnmute()" class="main__controls__button main__mute_button">
                  <i class="fas fa-microphone"></i>
                  <span>Mute</span>
               </div>
               <div onclick="playStop()" class="main__controls__button main__video_button" >
                  <i class="fas fa-video"></i>
                  <span>Stop Video</span>
               </div>
            </div>
            <div class="main__controls__block">
               <div class="main__controls__button">
                  <i class="fas fa-shield-alt"></i>
                  <span>Security</span>
               </div>
               <div class="main__controls__button">
                  <i class="fas fa-user-friends"></i>
                  <span>Participants</span>
               </div>
               <div class="main__controls__button">
                  <i class="fas fa-comment-alt"></i>
                  <span>Chat</span>
               </div>
            </div>
            <div class="main__controls__block">
               <div class="main__controls__button">
                  <span class="leave_meeting"  onclick="leaveCall()">Leave Meeting</span>
               </div>
            </div>
         </div>
      </div>
      <div class="main__right">
         <div class="main__header">
            <h6>Chat</h6>
         </div>
         <div class="main__chat_window">
            <ul class="messages">
               
            </ul>

         </div>
         <div class="main__message_container">
            <input id="chat_message" type="text" placeholder="Type message here...">
         </div>
      </div>
   </div>
</body>
<!-- Include Peer.js library -->
<script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js" ></script>
<script defer>
var appointments = JSON.parse(localStorage.getItem("userId"));
console.log(appointments);
let peer = {};
const socket = io('/', {
  query: {
    appointmentId: appointments.appointmentId,
  }
});
const videoGrid = document.getElementById('video-grid');
myPeer = new Peer(appointments.userId, {
  path: '/peerjs',
  host: '/',
  port: '3030'
})
let myVideoStream;
const myVideo = document.createElement('video')
myVideo.muted = true;
const peers = {}
navigator.mediaDevices.getUserMedia({
  video: true,
  audio: true
}).then(stream => {
  myVideoStream = stream;
  addVideoStream(myVideo, stream)
  myPeer.on('call', call => {
    call.answer(stream)
    const video = document.createElement('video')
    call.on('stream', userVideoStream => {
      addVideoStream(video, userVideoStream)
    })
  })

  socket.on('user-connected', userId => {
    console.log("ðŸš€ ~ file: script.js:34 ~ userId:", userId);
    connectToNewUser(userId, stream)
  })
  // Get the input element
let text = document.querySelector("input");

// Add event listener for keydown event on the HTML element
document.querySelector('html').addEventListener('keydown', function(e) {
  // Check if the pressed key is Enter (key code 13) and the input value is not empty
  if (e.which === 13 && text.value.length !== 0) {
    // Emit a 'message' event through the socket with the input value as the message
    socket.emit('message', text.value);
    // Clear the input value
    text.value = '';
  }
});
  socket.on("createMessage", message => {
    $("ul").append(`<li class="message"><b>user</b><br/>${message}</li>`);
    scrollToBottom()
  })
})

socket.on('user-disconnected', userId => {
  if (peers[userId]) peers[userId].close()
})

myPeer.on('open', id => {
  socket.emit('join-room', ROOM_ID, id)
})

function connectToNewUser(userId, stream) {
  const call = myPeer.call(userId, stream)
  console.log("ðŸš€ ~ file: script.js:66 ~ connectToNewUser ~ call:", call);
  const video = document.createElement('video')
  call.on('stream', userVideoStream => {
    addVideoStream(video, userVideoStream)
  })
  call.on('close', () => {
    video.remove()
  })

  peers[userId] = call
}

function addVideoStream(video, stream) {
  video.srcObject = stream
  video.addEventListener('loadedmetadata', () => {
    video.play()
  })
  videoGrid.append(video)
}



const scrollToBottom = () => {
  var d = $('.main__chat_window');
  d.scrollTop(d.prop("scrollHeight"));
}


const muteUnmute = () => {
  const enabled = myVideoStream.getAudioTracks()[0].enabled;
  if (enabled) {
    myVideoStream.getAudioTracks()[0].enabled = false;
    setUnmuteButton();
  } else {
    setMuteButton();
    myVideoStream.getAudioTracks()[0].enabled = true;
  }
}

const playStop = () => {
  console.log('object')
  let enabled = myVideoStream.getVideoTracks()[0].enabled;
  if (enabled) {
    myVideoStream.getVideoTracks()[0].enabled = false;
    setPlayVideo()
  } else {
    setStopVideo()
    myVideoStream.getVideoTracks()[0].enabled = true;
  }
}

const setMuteButton = () => {
  const html = `
    <i class="fas fa-microphone"></i>
    <span>Mute</span>
  `
  document.querySelector('.main__mute_button').innerHTML = html;
}

const setUnmuteButton = () => {
  const html = `
    <i class="unmute fas fa-microphone-slash"></i>
    <span>Unmute</span>
  `
  document.querySelector('.main__mute_button').innerHTML = html;
}

const leaveCall = () => {
    // Emit an event to the server to indicate that the user is leaving
    socket.emit('leave-room', { roomId: ROOM_ID, userId: myPeer.id });
    console.log("hello", myPeer.id);
    // Implement any additional logic, like redirecting the user to a different page
  };

// socket.on('user-left', () => {
//     // Implement any logic you want when a user leaves the room
//     // Redirect the user who left to the home page
// });

socket.on('redirect-home', (userId) => {
    window.location.href = `/v1/home?userId=${userId}`;
});

const setStopVideo = () => {
  const html = `
    <i class="fas fa-video"></i>
    <span>Stop Video</span>
  `
  document.querySelector('.main__video_button').innerHTML = html;
}

const setPlayVideo = () => {
  const html = `
  <i class="stop fas fa-video-slash"></i>
    <span>Play Video</span>
  `
  document.querySelector('.main__video_button').innerHTML = html;
}


</script>
</html>